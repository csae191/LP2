DFS-

graph = { 
 'P' : ['Q','R','S'], 
 'Q' : ['R', 'T'], 
 'R' : ['T'], 
 'S' : [], 
 'T' : [] 
} 
visited = set() # Set to keep track of visited nodes of graph. 
def dfs(visited, graph, node): #function for dfs 
    if node not in visited: 
        print (node) 
        visited.add(node) 
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour) 
# Driver Code 
print("Following is the Depth-First Search") 
dfs(visited, graph, 'P')

BFS-

graph = { 
 'P' : ['Q','R','S'], 
 'Q' : ['R', 'T'], 
 'R' : ['T'], 
 'T' : [], 
 'S' : [] 
} 
visited = [] # List for visited nodes. 
queue = [] #Initialize a queue 
def bfs(visited, graph, node): #function for BFS 
    visited.append(node) 
    queue.append(node) 
    while queue: # Creating loop to visit each node 
        m = queue.pop(0) 
        print (m) 
        for neighbour in graph[m]: 
            if neighbour not in visited: 
                visited.append(neighbour) 
                queue.append(neighbour) 
# Driver Code 
print("Following is the Breadth-First Search") 
bfs(visited, graph, 'P') # function calling