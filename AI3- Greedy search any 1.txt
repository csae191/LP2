1- Selection sort
def selection_sort(arr):
    for i in range (len(arr)):
        min_index= i
        for j in range (i+1,len(arr)):
            if arr[j]< arr[min_index]:
                min_index=j
        arr[i],arr[min_index]= arr[min_index],arr[i]
    return arr
a1=[20,10,5,7,9,13]
selection_sort(a1)


2-Prims Algorithum
INF = 9999999
N = 5
G = [[0, 19, 5, 0, 0],
     [19, 0, 5, 9, 2],
     [5, 5, 0, 1, 6],
     [0, 9, 1, 0, 1],
     [0, 2, 6, 1, 0]]

selected_node = [0, 0, 0, 0, 0]

no_edge = 0

selected_node[0] = True

print("Edge : Weight\n")
while (no_edge < N - 1):
    
    minimum = INF
    a = 0
    b = 0
    for m in range(N):
        if selected_node[m]:
            for n in range(N):
                if ((not selected_node[n]) and G[m][n]):  
                    # not in selected and there is an edge
                    if minimum > G[m][n]:
                        minimum = G[m][n]
                        a = m
                        b = n
    print(str(a) + "-" + str(b) + ":" + str(G[a][b]))
    selected_node[b] = True
    no_edge += 1


3- Krushkal
def kruskal(graph):
    mst=[]
    edges=[(cost,frm,to) for frm, to_dict in graph.items() for to,cost in to_dict.items()]
    edges.sort()
    parent={node: node for node in graph}
    
    def find_root(node):
        if parent[node]== node:
            return node
        parent[node]=find_root(parent[node])
        return parent[node]

    for cost,frm,to in edges:
        root1= find_root(frm)
        root2= find_root(to)
        if root1 != root2:
            parent[root1]= root2
            mst.append((frm, to ,cost))
    return mst

graph={
    'A':{'B':2,'C':3},
    'B':{'A':2,'C':1,'D':1},
    'C':{'A':3,'B':1,'D':4},
    'D':{'B':1,'C':4},
}
print(kruskal(graph))